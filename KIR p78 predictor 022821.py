# 2.28.21# KIR binding prediction algorithmimport pandas as pdimport numpy as npfrom sklearn.tree import DecisionTreeClassifierfrom keras.models import Sequentialfrom keras.layers import Densefrom sklearn.model_selection import train_test_splitfrom sklearn.ensemble import RandomForestClassifier# import csv filepd_data = pd.read_csv("p2LibData.csv", header = None)#amino acids and numberscodes = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L',             'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y']        def num_encode(peptide_list):    ''' input a single column array of peptides in single letter format to     generate a list of numerized peptides        returns:  single column array of number-encoded peptides '''        #initialize peptide sequence    num_list = []                for pep in peptide_list:                #initialize amino acid sequence per peptide        aa_seq = []        for aa in pep:                        #change each peptide letter to a number from codes list            aa_seq.append(int(codes.index(aa)))                                        #add the numerized peptide to the big list        num_list.append(aa_seq)            return np.array(num_list)'''set data and target'''num_data = num_encode(pd_data[0])raw_target = np.array(pd_data[1])'''make target into categorical'''target = []mid = 0.2high = 0.6for value in raw_target:    if value < mid:        target.append(0)    elif value < high:        target.append(1)    else:        target.append(2)X_train, X_test, y_train, y_test = train_test_split(        num_data, target, test_size=0.2, random_state=509)rf = RandomForestClassifier()rf.fit(X_train, y_train)score = rf.score(X_test, y_test)print(score)print('Training Set Score:  ', "{:.2f}".format(score))print(num_encode(pd_data[0]))pred_pep = ['AAASKGAWV','AAASKGGRV' ]pred_scores = rf.predict_proba(num_encode(pred_pep))    print(pred_scores)'''take index of highest value of output'''for j, score in enumerate(pred_scores):        (m,i) = max((v,i) for i,v in enumerate(score))       binders = ['Low Binder', 'Mid Binder', 'High Binder']        print(pred_pep[j], binders[i])    # #initialize ANN model# model = Sequential()# # make hidden layers# model.add(Dense(100, activation = 'relu'))# # make output layer# model.add(Dense(1, activation='sigmoid'))# # Compile, defining loss function and optimization function# model.compile(loss='binary_crossentropy', optimizer='adam', #               metrics=['accuracy'])# # Fit the training data to the model# model.fit(X_train, y_train, epochs = 10)# print("Model Evaluation:   ")# model.evaluate(X_test, y_test)# print(num_data[0])# model.predict(num_data[0])# tree_list = []# for value in (2,5,10,50,100):#     clf = DecisionTreeClassifier(max_depth = value, random_state=509)#     clf.fit(X_train, y_train)#     tree_list.append([value, clf.score(X_test, y_test), clf.get_depth()])# print(tree_list)#split data and vector# train test split# fit model# generate output predictions # 